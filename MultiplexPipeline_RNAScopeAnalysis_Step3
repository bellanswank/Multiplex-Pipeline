% This program processes excels exported from cell profiler to 
% get cell-dependent fluorescent puncta data (including cell types,
% fluorescent occupancy, puncta distribution, etc). In order to run this
% program appropriately, the following files are required:

%Input:
% 1. ROIs.mat (generated by ROISelectionForCellProfiler.m)
% 2. MyExpt_Image.csv 
% 3. MyExpt_(Channel names)_dots.csv
% 4. MyExpt_AllCells.csv

%Output:
%Imageprocessing.mat with NeuroData spreadsheet with counts of each
%fluorophore and percentage of each against DAPI/total cells


% Last edited date: 03/03/2022
% Last edited by Isabella Swank, based on original program by Runbo Gao,
% donated by the Anna Lee Lab

clear all
close all
clc

%% Select folders & Read excels
disp('Please select the mat file storing ROIs information')
[File,ROIPath] = uigetfile();
cd(ROIPath)
load(File)

disp('Please select the folder storing excels you want to process')
FolderPath = uigetdir(); % select the folder storing images
cd(FolderPath)

% extract channel names
ImgInfo = readtable('MyExpt_Image.csv','Delimiter',',');
TempNm = fieldnames(ImgInfo);
ImgNmIndex = contains(TempNm,'FileName');
ProbeTargetNm = split(TempNm(ImgNmIndex),'_');
ProbeTargetNm(:,1) = [];

% load excels storing fluorescent puncta information  
for i = 1 : length(ProbeTargetNm)
    if strcmp(ProbeTargetNm{i,1},'DAPI') || strcmp(ProbeTargetNm{i,1},'Dapi') || strcmp(ProbeTargetNm{i,1},'dapi')
        continue
    elseif strcmp(ProbeTargetNm{i,1},'OVERLAY') || strcmp(ProbeTargetNm{i,1},'Overlay') || strcmp(ProbeTargetNm{i,1},'overlay')
        OverlayN = i;
        continue
    else
        Dots.(ProbeTargetNm{i,1}) = readtable(strcat('MyExpt_',ProbeTargetNm{i,1},'_dots.csv'));
    end
end

% load the excel storing cell size information
AllCells = readtable('MyExpt_AllCells.csv');
clear i ImgNmIndex TempNm

% load the excel storing ROI Area information
ROIArea = struct2table(vertcat(ROIs.ROIArea ...
    ));
%% Re-format data & fluorecence quantification
% split image name into multiple components according to "_"
SplitName = split(ImgInfo.(strcat('FileName_',ProbeTargetNm{OverlayN,1}))(1),'_');
disp(strcat('Detect'," ",string(length(SplitName)),' component(s).'))
for i = 1 : length(SplitName)
    disp(SplitName{i})
end

% generate a struct called Neurons to store results
Neurons = struct();

% assign names to necessary components & store names as fields in Neurons
% (Must have more than two)
n = 1;
NeuronFieldNames = cell(n,2);
for i = 1 : length(SplitName)
    Flag = 0;
    while Flag == 0
        Inputs = input(strcat('Do you want to keep component'," ",SplitName{i},' in your data? (y or n)'),'s');
        if strcmp(Inputs,'y')
            Inputs = input('Please type in the name of this component. ','s');
            disp('')
            if sum(strcmp(NeuronFieldNames(:,2),Inputs)) > 0
                disp('This name matches one of the previous name, please use another name')
            else
                NeuronFieldNames{n,1} = i;
                NeuronFieldNames{n,2} = Inputs;
                Neurons.(NeuronFieldNames{n,2}) = [];
                n = n + 1;
                Flag = 1;
            end
        elseif strcmp(Inputs,'n')
            Flag = 1;
        end
    end
end
clear n Flag

% determine whether or not average data points across ROIs from one animal
Flag2 = 0;
while Flag2 == 0
    Inputs = input('Do you want to keep each ROI (image) separated? (y/n)','s');
    switch Inputs
        case 'y'
            Flag2 = 2;
        case 'n'
            Flag2 = 1;
    end
end

% generate puncta-related field names for Neurons
Neurons.NonSpecificBindingRate = [];
CellSize = [];
FdName = fieldnames(Dots);
for i = 1 : length(FdName)
    Neurons.(FdName{i}) = [];
end

% Process data from cell profiler
for i = 1 : length(ImgInfo.ImageNumber)
    % assign values to corresonding fields 
    ImgName = ImgInfo.(strcat('FileName_',ProbeTargetNm{OverlayN,1})){i};
    SplitName = split(ImgName,'_'); % ID_DC/GC/WT_Nachr_slice_Orientation_channel_ROI.tif
    for j = 1 : size(NeuronFieldNames,1)
        Neurons(i,1).(NeuronFieldNames{j,2}) = SplitName(NeuronFieldNames{j,1});
    end
    
    % calculate cell size
    Neurons(i,1).CellSize = AllCells.AreaShape_Area(AllCells.ImageNumber(:) == i);
    
    % get the overlay image index
    for ii = 1: length(SplitName)
        aa = strcmp(SplitName{ii},'OVERLAY') | strcmp(SplitName{ii},'Overlay') | strcmp(SplitName{ii},'overlay');
        if aa == 1
            break
        end
    end
    
    % Import ROI Area data  
    ROISize = table2array(ROIArea(i,1));
    clear aa ii
    
    CurImgDots = struct();
    for ch = 1 : length(FdName)
        
        % extract puncta in the current image from all puncta
        Area = Dots.(FdName{ch}).AreaShape_Area(Dots.(FdName{ch}).ImageNumber(:) == i); % punctum size 
        ParentCell = Dots.(FdName{ch}).Parent_AllCells(Dots.(FdName{ch}).ImageNumber(:) == i); % the cell to which the punctum belongs
        CurImgDots.(FdName{ch}) = table(Area,ParentCell,'VariableNames',{'Area','ParentCell'}); % store the above information in a new table
        
        % calculate background area and percentage of background puncta.
        % background area (NonObjectArea) is the size of ROI subtracted by
        % sum of the cell area (different channel has different rate).
        % percentage of background puncta (NonSpecificBindingRate) is
        % calculated by dividing the sum of the puncta area by background
        % area (NonObjectArea)

        NonObjectArea = ROISize - sum(Neurons(i).CellSize);
        Neurons(i).NonSpecificBindingRate.(FdName{ch}) = sum(CurImgDots.(FdName{ch}).Area(CurImgDots.(FdName{ch}).ParentCell(:) == 0)) ./ NonObjectArea;
        
        % calculate total area of puncta within each cell
        for CellNum = 1 : length(Neurons(i).CellSize)
            Neurons(i).(FdName{ch})(CellNum,1) = sum(CurImgDots.(FdName{ch}).Area(CurImgDots.(FdName{ch}).ParentCell == CellNum));
        end
        
        % calculate probability that the puncta within a specific cell are
        % off-target binding (non-specific binding) given the
        % NonSpecificBindingRate calculated above, based on binomial
        % distribution
        Neurons(i).(FdName{ch})(:,2) = binocdf(Neurons(i).(FdName{ch})(:,1),[Neurons(i).CellSize],Neurons(i).NonSpecificBindingRate.(FdName{ch})) - ...
            binocdf(Neurons(i).(FdName{ch})(:,1)-1,[Neurons(i).CellSize],Neurons(i).NonSpecificBindingRate.(FdName{ch})) ;
        
        % use the probability calculated above to determine whether or not
        % a specific cell is probe-positive. Two criteria:
        % 1. puncta in a cell > cell size * non-specific binding rate
        % 2. the probability < 0.01 / number of cells (Bonferroni correction) 
        Neurons(i).(FdName{ch})(:,3) = (Neurons(i).(FdName{ch})(:,1) > [Neurons(i).CellSize] .* Neurons(i).NonSpecificBindingRate.(FdName{ch})) & ...
            (Neurons(i).(FdName{ch})(:,2) < 0.01/length(Neurons(i).CellSize));
    end
end
clear SplitName ROISize FdName CurImgDots Area ParentCell NonObjectArea
%% Data analysis
% generate probe-related fields 
DotsField = fieldnames(Dots);
CombinedDotsField = DotsField;
if length(DotsField) == 2 % only two channels 
    CombinedDotsField{3} = strcat(DotsField{1},'_',DotsField{2});
elseif length(DotsField) == 3 % three channels
    CombinedDotsField{4} = strcat(DotsField{1},'_',DotsField{2});
    CombinedDotsField{5} = strcat(DotsField{1},'_',DotsField{3});
    CombinedDotsField{6} = strcat(DotsField{2},'_',DotsField{3});
    CombinedDotsField{7} = strcat(DotsField{1},'_',DotsField{2},'_',DotsField{3});
end

% generate NeuroData info
if Flag2 == 1 % combined ROIs
    Subjects = unique([Neurons(:).(NeuronFieldNames{1,2})]');
elseif Flag2 == 2 % separated ROIs
    Subjects = [Neurons(:).(NeuronFieldNames{1,2})]';
end
NeuroData = struct(NeuronFieldNames{1,2},Subjects);
for i = 2 : length(NeuronFieldNames)
    [NeuroData(:).(NeuronFieldNames{i,2})] =  deal([]);
end
[NeuroData(:).TotalCells] = deal(0);
for i = 1 : length(CombinedDotsField)
    [NeuroData.(CombinedDotsField{i})] = deal(0);
end

% calculate probe-related NeuroData results
for i = 1 : size(NeuroData,1)
    if Flag2 == 1
        AnimalIndex = strcmp([Neurons(:).(NeuronFieldNames{1,2})]',NeuroData(i,1).(NeuronFieldNames{1,2}));
        IndexNum = find(AnimalIndex);
    elseif Flag2 == 2
        IndexNum = i;
    end
    for j = 2 : length(NeuronFieldNames)
        NeuroData(i,1).(NeuronFieldNames{j,2}) = unique([Neurons(IndexNum).(NeuronFieldNames{j,2})]);
    end
    for j = 1 : length(IndexNum)
        
        % total number of cells
        NeuroData(i,1).TotalCells = length(Neurons(IndexNum(j)).CellSize(:,1)) + NeuroData(i,1).TotalCells;
        
        % number of single-label & co-label cells
        NeuroData(i,1).(CombinedDotsField{1}) = sum(Neurons(IndexNum(j)).(DotsField{1})(:,3)) + NeuroData(i,1).(CombinedDotsField{1});
        switch length(DotsField)
            case 2
                NeuroData(i,1).(CombinedDotsField{2}) = sum(Neurons(IndexNum(j)).(DotsField{2})(:,3)) + NeuroData(i,1).(CombinedDotsField{2});
                NeuroData(i,1).(CombinedDotsField{3}) = sum(Neurons(IndexNum(j)).(DotsField{1})(:,3) & Neurons(IndexNum(j)).(DotsField{2})(:,3)) + NeuroData(i,1).(CombinedDotsField{3});
            case 3
                NeuroData(i,1).(CombinedDotsField{2}) = sum(Neurons(IndexNum(j)).(DotsField{2})(:,3)) + NeuroData(i,1).(CombinedDotsField{2});
                NeuroData(i,1).(CombinedDotsField{3}) = sum(Neurons(IndexNum(j)).(DotsField{3})(:,3)) + NeuroData(i,1).(CombinedDotsField{3});
                NeuroData(i,1).(CombinedDotsField{4}) = sum(Neurons(IndexNum(j)).(DotsField{1})(:,3) & Neurons(IndexNum(j)).(DotsField{2})(:,3)) + NeuroData(i,1).(CombinedDotsField{4});
                NeuroData(i,1).(CombinedDotsField{5}) = sum(Neurons(IndexNum(j)).(DotsField{1})(:,3) & Neurons(IndexNum(j)).(DotsField{3})(:,3)) + NeuroData(i,1).(CombinedDotsField{5});
                NeuroData(i,1).(CombinedDotsField{6}) = sum(Neurons(IndexNum(j)).(DotsField{2})(:,3) & Neurons(IndexNum(j)).(DotsField{3})(:,3)) + NeuroData(i,1).(CombinedDotsField{6});
                NeuroData(i,1).(CombinedDotsField{7}) = sum(Neurons(IndexNum(j)).(DotsField{1})(:,3) & Neurons(IndexNum(j)).(DotsField{2})(:,3) & Neurons(IndexNum(j)).(DotsField{3})(:,3)) + NeuroData(i,1).(CombinedDotsField{7});
        end
    end
end

% calculate percentage
for i = 1 : length(CombinedDotsField)
    Temp = num2cell([NeuroData.(CombinedDotsField{i})] ./ [NeuroData.TotalCells]);
    [NeuroData.(strcat('Pct_',CombinedDotsField{i}))] = deal(Temp{:});
end
clear Temp

% calculate probe distribution & occupancy
BinEdge = 0:0.02:1;
for i = 1 : size(NeuroData,1)
    if Flag2 == 1
        AnimalIndex = strcmp([Neurons(:).(NeuronFieldNames{1,2})]',NeuroData(i,1).(NeuronFieldNames{1,2}));
        IndexNum = find(AnimalIndex);
    elseif Flag2 == 2
        IndexNum = i;
    end
    
    % calculate single probe expression pattern (occupancy in individual
    % cell)
    for ch = 1 : length(DotsField)
        TotalTemp = [];
        for j = 1 : length(IndexNum)
            Temp(:,1) = Neurons(IndexNum(j)).(DotsField{ch})(:,1) ./ Neurons(IndexNum(j)).CellSize;
            Temp(:,2) = Neurons(IndexNum(j)).(DotsField{ch})(:,3);
            TotalTemp = [TotalTemp;Temp];
            clear Temp
        end
        NeuroData(i,1).(strcat(DotsField{ch},'Expression')) = TotalTemp;
        clear TotalTemp
    end
    
    % calculate probe expression (occupancy in individual cell) in another 
    % probe+ cells 
    for j = 1 : length(DotsField)
        for k = 1 : length(DotsField)
                TempNm = strcat(DotsField{j},'in',DotsField{k},'Expression');
                NeuroData(i,1).(TempNm)(:,1) = NeuroData(i,1).(strcat(DotsField{j},'Expression'))(NeuroData(i,1).(strcat(DotsField{k},'Expression'))(:,2) > 0,1);
                NeuroData(i,1).(TempNm)(:,2) = NeuroData(i,1).(strcat(DotsField{j},'Expression'))(NeuroData(i,1).(strcat(DotsField{k},'Expression'))(:,2) > 0,2);
        end
    end
    clear TempNm
    
    % calculate occupancy histogram and average 
    for ch = 1 : length(DotsField)
        NeuroData(i,:).(strcat(DotsField{ch},'Hist')) = histcounts(NeuroData(i,1).(strcat(DotsField{ch},'Expression'))(:,1),BinEdge) ./ NeuroData(i,1).TotalCells;
        PositiveIndex = NeuroData(i,1).(strcat(DotsField{ch},'Expression'))(:,2)  == 1;
        NeuroData(i,:).(strcat(DotsField{ch},'Avg')) = mean(NeuroData(i,1).(strcat(DotsField{ch},'Expression'))(PositiveIndex,1),1);
       for k = 1 : length(DotsField)
%             if ch ~= k
                TempNm = strcat(DotsField{ch},'in',DotsField{k});
                NeuroData(i,:).(strcat(TempNm,'Hist')) = histcounts(NeuroData(i,1).(strcat(TempNm,'Expression'))(:,1),BinEdge) ./ NeuroData(i,1).(DotsField{k});
                PositiveIndex = NeuroData(i,1).(strcat(TempNm,'Expression'))(:,2) == 1;
                NeuroData(i,:).(strcat(TempNm,'Avg')) = mean(NeuroData(i,1).(strcat(TempNm,'Expression'))(PositiveIndex,1),1);
%             end
       end
    end
    clear TempNm
        
end

%% save data
save('Imagingprocessing.mat','Neurons','NeuroData')

%% end of processing
disp('The end')







